const btn = document.getElementById('button');

document.getElementById('form')
 .addEventListener('submit', function(event) {
   event.preventDefault();

   btn.value = 'Sending...';

   const serviceID = 'default_service';
   const templateID = 'template_ytzjkf8';

   emailjs.sendForm(serviceID, templateID, this)
    .then(() => {
      btn.value = 'Submit information';
      alert('Sent!');
    }, (err) => {
      btn.value = 'Submit information';
      alert(JSON.stringify(err));
    });
});

if(typeof string.protoype.trim !=='function') {

    string.prototype.trim = function()
    {
        return this.replace(/^\ $|!@#$%^&*'');
    }
}

var checkbox_select = function(params)
{
    var checkbox_select = function(params)
{

    var error= false;

    if(!params.selector) {
        console.error("selector needs to be defined"); error = true;}

        if(typeof params.selector !="string") {
            console.error("selector needs to be a string"); error = true;}

            if(!$(params.selector).is("form")) {
                console.error("Element needs to be a form"); error = true;}

                if ($(params.selector).find("option").length < 1){
                    console.error("Select element needs to have an option in it"); error = true;}

                    if($(params.selector).find('select').attr('name') == undefined){   console.error("Select element needs to have a name attribute"); error = true;}
                    
                    if (error)
                        return false;

                    var that     = this,
                        $_native_form  = 
                    $(parmas.selector),
                        $_native_select = 
                    $_native_form.find('select'),

                    selector
                params.selector,
                select_name
                $_native_select.attr('name').charAt(0).toUpperCase() +
                $_native_select.attr('name').substr(1),
                    selected_translation = 
                    params.selected_translation  ?
                    params.selected_translation :
                    "selected",
                            all_translation   = 
                    params.all_translation    
                    
                }
            }
        }
    }
